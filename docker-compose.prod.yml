#prod
version: "3.9"

services:
  frontend-part:
    image: alonimacaroni/vote-frontend:prod
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-part.entrypoints=websecure"
      - "traefik.http.routers.frontend-part.rule=Host(`${DOMAIN_URL}`) || Host(`www.${DOMAIN_URL}`)"
      - "traefik.http.routers.frontend-part.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend-part.middlewares=wwwtohttps"
    networks:
      - proxy
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  
  vote-app-mysql:
    image: mysql:8.0
    ports:
      # - target: ${MYSQL_PORT}
      #   published: ${MYSQL_PORT}
      - target: 3306
        published: 3306
        protocol: tcp
        mode: host
    networks:
      - proxy
    volumes:
      - mysql:/var/lib/mysql:delegated
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      # - MYSQL_HOST=${MYSQL_HOST}
      # - MYSQL_PORT=${MYSQL_PORT}
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  
  backend-part:
    image: alonimacaroni/vote-backend:prod
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.backend-part.entrypoints=websecure"
      - "traefik.http.routers.backend-part.rule=Host(`${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`) || Host(`www.${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`)"
      - "traefik.http.routers.backend-part.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-part.middlewares=wwwtohttps"
    command: >
      sh -c 'gunicorn vote_app_backend.wsgi:application --workers 3 --bind :80'
    networks:
      - proxy
    environment:
      - DATABASE_NAME=${MYSQL_DATABASE}
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASS=${MYSQL_PASSWORD}
      - DATABASE_HOST=${MYSQL_HOST}
      - DATABASE_PORT=${MYSQL_PORT}
      - URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - URI_CSRF_PATH=${URI_CSRF_PATH}
      - DOMAIN_URL=${DOMAIN_URL}
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  migrator:
    image: alonimacaroni/vote-backend:prod
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.backend-part.entrypoints=websecure"
      - "traefik.http.routers.backend-part.rule=Host(`${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`) || Host(`www.${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`)"
      - "traefik.http.routers.backend-part.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-part.middlewares=wwwtohttps"
    restart: unless-stopped
    command:
      - /bin/sh
      - -c
      - |
        until nc -z -v -w30 vote-app-mysql 3306; do sleep 2; done;
        python manage.py migrate
    networks:
      - proxy
    environment:
      - DATABASE_NAME=${MYSQL_DATABASE}
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASS=${MYSQL_PASSWORD}
      - DATABASE_HOST=${MYSQL_HOST}
      - DATABASE_PORT=${MYSQL_PORT}
      - URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - URI_CSRF_PATH=${URI_CSRF_PATH}
      - DOMAIN_URL=${DOMAIN_URL}
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: none
  
  proxy-part:
    image: traefik:v2.7
    command: 
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=schroeder@convidera.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      # Logging
      - --accesslog
      - --log.level=debug
    #dynamic configuration
    labels:
      # - "traefik.enable=true"
      # # - "traefik.http.middlewares.wwwtohttps.redirectregex.regex=^https?://www\\.(.+)"
      # # - "traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}"
      # # - "traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true"
      # ##  disable TLS version 1.0 and 1.1
      # - "traefik.tls.options.default.minversion=VersionTLS12"
      # - "traefik.tls.options.default.sniStrict=true"
      # #configure encryption methods
      # - "traefik.http.middlewares.secureheaders.headers.browserxssfilter=true"
      # - "traefik.http.middlewares.secureheaders.headers.contenttypenosniff=true"
      # # #SSL config
      # - "traefik.http.middlewares.secureheaders.headers.framedeny=true"
      # - "traefik.http.middlewares.secureheaders.headers.sslredirect=true"
      # # #HSTS config
      # - "traefik.http.middlewares.secureheaders.headers.stsincludesubdomains=true"
      # - "traefik.http.middlewares.secureheaders.headers.stspreload=true"
      # - "traefik.http.middlewares.secureheaders.headers.stsseconds=31536000"
      # - "traefik.http.middlewares.secureheaders.headers.customframeoptionsvalue=SAMEORIGIN"
      # # #CORS config
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolalloworigin=origin-list-or-null"
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolmaxage=100"
      # - "traefik.http.middlewares.secureheaders.headers.addvaryheader=true"
      - traefik.enable=true
      #- "traefik.http.routers.proxy-part.middlewares=wwwtohttps"
      - traefik.http.middlewares.wwwtohttps.redirectregex.regex=^https?://www\\.(.+)
      - traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}
      - traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true
      # # Global redirection: HTTP to HTTPS
      # - traefik.http.routers.http-redirects.entrypoints=web
      # - traefik.http.routers.http-redirects.rule=hostregexp(`{host:(www\.)?.+}`)
      # - traefik.http.routers.http-redirects.middlewares=redirect-to-non-www-https
      # # Global redirection: HTTPS www to HTTPS non-www
      # - traefik.http.routers.www-redirects.entrypoints=websecure
      # - traefik.http.routers.www-redirects.rule=hostregexp(`{host:(www\.).+}`)
      # - traefik.http.routers.www-redirects.tls=true
      # - traefik.http.routers.www-redirects.tls.options=default
      # - traefik.http.routers.www-redirects.middlewares=redirect-to-non-www-https
      # # Middleware to redirect to bare https
      # - traefik.http.middlewares.redirect-to-non-www-https.redirectregex.regex=^https?://(?:www\.)?(.+)
      # - traefik.http.middlewares.redirect-to-non-www-https.redirectregex.replacement=https://$${1}
      # - traefik.http.middlewares.redirect-to-non-www-https.redirectregex.permanent=true
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
    networks:
      - proxy
    volumes: 
      - /var/traefik/certificates:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  proxy:
    driver: overlay

volumes:
  mysql:
    driver: local
  traefik:
    driver: local