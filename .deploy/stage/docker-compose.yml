#stage
version: "3.9"

services:
  frontend-part:
    image: alonimacaroni/vote-frontend:latest
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-part-http.entrypoints=web"
      - "traefik.http.routers.frontend-part-http.rule=Host(`${DOMAIN_URL}`, `www.${DOMAIN_URL}`)"
      - "traefik.http.routers.frontend-part-http.middlewares=frontend-part-https"
      - "traefik.http.middlewares.frontend-part-https.redirectscheme.scheme=https"
      - "traefik.http.routers.frontend-part.entrypoints=websecure"
      - "traefik.http.routers.frontend-part.rule=Host(`${DOMAIN_URL}`, `www.${DOMAIN_URL}`)"
      - "traefik.http.routers.frontend-part.tls=true"
      - "traefik.http.routers.frontend-part.tls.certresolver=myresolver"
      - "traefik.docker.network=proxy"
#      - "traefik.http.routers.frontend-part.middlewares=force-https"
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./frontend-ui:/app
    #don't use run serve on server
    # command: >
    #   sh -c 'npm run serve'
    environment:
      - VUE_APP_URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - VUE_APP_URI_CSRF_PATH=${URI_CSRF_PATH}
      - VUE_APP_DOMAIN_URL=${DOMAIN_URL}
    security_opt:
      - no-new-privileges:true
  
  vote-app-mysql:
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - "3306:3306"
    networks:
      - proxy
    volumes:
      - mysql:/var/lib/mysql:delegated
      - ./db_assets:/docker-entrypoint-initdb.d/:delegated
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    security_opt:
      - no-new-privileges:true
  
  backend-part:
    image: alonimacaroni/vote-backend:latest
#   install missing dependencies
#    build:
#      context: ./vote_app_backend
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.backend-part-http.entrypoints=web"
      - "traefik.http.routers.backend-part-http.rule=Host(`${DOMAIN_URL}`, `www.${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`)"
      - "traefik.http.routers.backend-part-http.middlewares=frontend-part-https"
      - "traefik.http.middlewares.backend-part-https.redirectscheme.scheme=https"
      - "traefik.http.routers.backend-part.entrypoints=websecure"
      - "traefik.http.routers.backend-part.rule=Host(`${DOMAIN_URL}`, `www.${DOMAIN_URL}`) && PathPrefix(`/${URI_ENTRYP_PATH}`)"
      - "traefik.http.routers.backend-part.tls=true"
      - "traefik.http.routers.backend-part.tls.certresolver=myresolver"
      - "traefik.docker.network=proxy"
#      - "traefik.http.routers.backend-part.middlewares=force-https"
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./vote_app_backend:/code
    # command: >
    #   sh -c 'gunicorn vote_app_backend.wsgi:application --bind 0.0.0.0:8000'
    environment:
      - DATABASE_NAME=${MYSQL_DATABASE}
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASS=${MYSQL_PASSWORD}
      - URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - URI_CSRF_PATH=${URI_CSRF_PATH}
      - DOMAIN_URL=${DOMAIN_URL}
    security_opt:
      - no-new-privileges:true
    depends_on:
      - vote-app-mysql
  
  proxy-part:
    image: traefik:v2.7
    restart: unless-stopped
    #static configuration
    command: >-
      --global.sendAnonymousUsage=false
      --log.level=DEBUG
      --api.dashboard=true
      --api.insecure=true
      --providers.docker=true
      --providers.docker.exposedbydefault=false
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --certificatesResolvers.myresolver.acme.email=schroeder@convidera.com
      --certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json
      --certificatesResolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      --certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=web
    #  --certificatesresolvers.myresolver.acme.tlschallenge=true
    ## don't do this in production:
    #  --api.dashboard=true
    labels:
      - "traefik.http.routers.proxy-part-http.entrypoints=web"
      - "traefik.http.routers.proxy-part-http.service=api@internal"
      - "traefik.http.routers.proxy-part-http.rule=Host(`dash.${DOMAIN_URL}`, `www.dash.${DOMAIN_URL}`)"
      - "traefik.http.routers.proxy-part-http.middlewares=proxy-part-https"
      - "traefik.http.middlewares.proxy-part-https.redirectscheme.scheme=https"
      - "traefik.http.routers.proxy-part.entrypoints=websecure"
      - "traefik.http.routers.proxy-part.service=api@internal"
      - "traefik.http.routers.proxy-part.rule=Host(`dash.${DOMAIN_URL}`, `www.dash.${DOMAIN_URL}`)"
      - "traefik.http.routers.proxy-part.tls=true"
#      - "traefik.http.routers.backend-part.middlewares=force-https"
      - "traefik.http.routers.proxy-part.tls.certresolver=myresolver"
      ##  disable TLS version 1.0 and 1.1
      # - "traefik.tls.options.default.minversion=VersionTLS12"
      # - "traefik.http.middlewares.secureheaders.headers.browserxssfilter=true"
      # - "traefik.http.middlewares.secureheaders.headers.contenttypenosniff=true"
      # #SSL config
      # - "traefik.http.middlewares.secureheaders.headers.framedeny=true"
      # - "traefik.http.middlewares.secureheaders.headers.sslredirect=true"
      # #HSTS config
      # - "traefik.http.middlewares.secureheaders.headers.stsincludesubdomains=true"
      # - "traefik.http.middlewares.secureheaders.headers.stspreload=true"
      # - "traefik.http.middlewares.secureheaders.headers.stsseconds=31536000"
      # - "traefik.http.middlewares.secureheaders.headers.customframeoptionsvalue=SAMEORIGIN"
      # #CORS config
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolallowmethods=GET,POST,OPTIONS"
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolalloworigin=origin-list-or-null"
      # - "traefik.http.middlewares.secureheaders.headers.accesscontrolmaxage=100"
      # - "traefik.http.middlewares.secureheaders.headers.addvaryheader=true"
    security_opt:
      - no-new-privileges:true
    #settings for mkcert, self-signed certs should be used locally (not letsencrypt)
    #letsencrypt needs to establish a connection via the http challenge
    #mkcert creates a cert and installs a CA locally
    #certificateresolver is only needed with letsencrypt
    ports:
      - "80:80"
      - "443:443"
    #dynamic configuration
    networks:
      - proxy
    volumes: 
      - ./.deploy/local/certificates:/usr/local/share/ca-certificates/janina:ro
      - traefik_acme:/letsencrypt
      #if you are using Docker as your provider
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  proxy:
    external: true

volumes:
  traefik_acme:
    driver: local
  mysql:
    driver: local