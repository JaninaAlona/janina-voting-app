#local
version: "3"


services:
  frontend-part:
    image: alonimacaroni/vote-frontend:latest
    labels: 
      #turn on traefik monitoring: enable traefik to recognize changes in the label configurations in the container
      traefik.enable: "true"
      traefik.http.routers.frontend-part.entrypoints: web, websecure
      traefik.http.routers.frontend-part.rule: Host(`janina.test`, `www.janina.test`)
      #obtain trusted SSL certificate
      traefik.http.routers.frontent-part.tls: "true"
      #traefik.http.routers.frontend-part.tls.certresolver: myresolver
      #traefik.http.routers.frontend-part-http.middlewares: force-https
    restart: unless-stopped
    volumes:
      - ./frontend-ui:/app
    #ports:
    #  - "8080:8080"
    #don't use run serve on server
    command: >
      sh -c 'npm run serve -- --port 80'
    #command: >
    #  sh -c 'npm run serve'
    environment:
      - VUE_APP_URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - VUE_APP_URI_CSRF_PATH=${URI_CSRF_PATH}
      - VUE_APP_DOMAIN_URL=${DOMAIN_URL}
    networks:
      - proxy
    depends_on:
      - proxy-part
  vote-app-mysql:
    image: mysql:8.0
    restart: unless-stopped
    volumes:
      - mysql:/var/lib/mysql:delegated
      - ./db_assets:/docker-entrypoint-initdb.d/:delegated
    # ports:
    #   - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    networks: 
      - proxy
  backend-part:
    image: alonimacaroni/vote-backend:latest
    labels: 
      traefik.enable: "true"
      traefik.http.routers.backend-part.entrypoints: web, websecure
      traefik.http.routers.backend-part.rule: Host(`janina.test`, `www.janina.test`) && PathPrefix(`/api/`)
      traefik.http.routers.backend-part.tls: "true"
      #for letsencrypt
      #traefik.http.routers.backend-part.tls.certresolver: myresolver 
      #traefik.http.routers.backend-part-http.middlewares: force-https
    restart: unless-stopped
    volumes:
      - ./vote_app_backend:/code
    #ports:
    #  - "8000:8000"
    command: >
      sh -c 'python manage.py runserver 0:80'
    #command: >
    #  sh -c 'python manage.py runserver 0:8000'
    environment:
      - DATABASE_NAME=${MYSQL_DATABASE}
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASS=${MYSQL_PASSWORD}
      - URI_ENTRYP_PATH=${URI_ENTRYP_PATH}
      - URI_CSRF_PATH=${URI_CSRF_PATH}
      - DOMAIN_URL=${DOMAIN_URL}
    networks:
      - proxy
    depends_on:
      - vote-app-mysql
      - proxy-part
  proxy-part:
    image: traefik:v2.7
    restart: unless-stopped
    #static configuration
    command: 
      - "--global.sendanonymoususage=false"
      #for debugging
      - "--log.level=DEBUG"
      #- "--log.level.format=common"
#formatbezeichnung richtig?
      #- "--log.format=json"
#dateiendung richtig?
      #- "--log.filePath=/var/log/traefik/traefik.json"
      #enable dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"
      #- "--providers.docker.endpoint=unix:///var/run/docker.sock"
      #- "--providers.docker.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      #redirection to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      #in order to use https locally you still need a CA
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      #settings for mkcert, self-signed certs should be used locally (not letsencrypt)
      #letsencrypt needs to establish a connection via the http challenge
      #mkcert creates a cert and installs a CA locally
      #certificateresolver is only needed with letsencrypt
      # - "--certificatesResolvers.myresolver.acme.email=schroeder@convidera.com"
      # - "--certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesResolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      # - "--certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=web"
      #traefik.http.routers.proxy-part.entrypoint: web
      #traefik.http.routers.proxy-part.entrypoint.to: websecure
      #traefik.http.middlewares.force-https.redirectscheme.scheme: https

      #- "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    #dynamic configuration
    labels:
      traefik.enable: "true"
      traefik.http.routers.proxy-part.tls: "true"
      #traefik.http.services.traefik.loadbalancer.server.port: "8080"
      traefik.tls.certificates.certFile: /usr/local/share/certificates/rwpc/janina.test+1.pem
      traefik.tls.certificates.keyFile: /usr/local/share/ca-certificates/rwpc/janina.test+1-key.pem
      traefik.http.routers.proxy-part.rule: Host(`dash.janina.test`, `www.dash.janina.test`)
      traefik.http.routers.proxy-part.service: api@internal
      #traefik.http.routers.proxy-part.tls.domains.main: janina.test, www.janina.test
    ports:
      - "80:80"
      - "443:443"
    security_opt:
      - no-new-privileges:true
    networks: 
      - proxy
    volumes: 
      #- /etc/traefik:/etc/traefik
      - ./.deploy/local/certificates:/usr/local/share/ca-certificates/rwpc:ro
      #- traefik_acme:/letsencrypt
      #ro - read only
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  proxy:
    driver: bridge

volumes:
  #traefik_acme:
  #  driver: local
  mysql:
    driver: local